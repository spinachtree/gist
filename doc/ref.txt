
title	Gist Reference

This is a reference guide, for an introduction and overview see: ^[The Gist Grammar Language]

The Gist rules are defined as:

eg
	name = expression	-- a one-match rule
	name : expression	-- terminal string one-match rule

The grammar expression defining a rule can include any of these operators:

eg
	X/Y		choice of X else Y, first sequential match
	X Y		sequence X then Y, space or comma separator (X,Y)
	X*		any number of X
	X+		one or more X, same as: (X X*)
	X?		optional X, same as: (X / '')
	X-!Y		X but-not Y, equivalent to: (!Y X)
	!X		not X, fails if X matches, else ''
	&X		asserts there is an X, same as: !!X
	(X)		group expression
	[X]		option, same as: X?
	{X}		repeat, same as: X*
	R		match rule R and generate a parse tree node
	R..		silent match with no parse tree node
	@R		match the same value matched by a prior R
	''		empty match (never fails)
	'a'		match a literal character
	'a'..'z'	match any character in this range
	'abc'		string match, short for: ('a' 'b' 'c')
	97		match a character with this code point, ie 'a'
	0x61		hex value code point match, ie 97 or 'a'
	0..127		match a character code in this range (eg ASCII chars)
	0x1..10FFFD	hex value code point range (eg Unicode chars)
	<event>		the parser generates an event (eg to <trace> progress)


The :X and :Y stand for any grammar expression, while the :R stands for a rule name. The binding strength, or precedence, increases from the top of the list, to the highest precedence at the bottom. Thus:

eg
	R = X Y+ Z / !P Q '0'..'9'*

is equvalent to:

eg
	R = ( (X (Y+) Z)
	  / ((!P) Q ('0'..'9')*) );

A rule definition may use an explicit ":[;]" as a terminator, and this allows multiple rules to appear on the same line. A rule may continue on the next line if there is a choice ":[/]" or an unclosed bracket, but an explicit comma ":[,]" or parenthesis are required to continue a sequence into the next line.

sub1	Comments

In-line to end of line comments can be introduced with either "--" or "//".

sub1	Predefined Rules

eg
	~	mathes any number of white-space characters
	$	matches a line break
	_	matches any character code point


sub1	Rule Names References

A rule reference may be a simple local name, or a fully qualified name: grammar.rule, where the grammar name may have any number of dot separated name parts. A simple name that is not defined as a local rule can refer to an external grammar using the import directive:

eg
	@import grammar

You can use a space separated list of external grammar names in one or more :[@import] directive, they are searched in the order given.

sub1	Choice Operators

The first sequential choice operator, written as :[X / Y], will first try to match :X, and only if that fails will the second choice :Y be matched. This is the PEG sequential choice operator.


sub1	Repeat Operators

The repeat operators are:

eg
	X?		optional match		X / ''
	X*		zero or more		Xs = X Xs.. / ''
	X+		one or more		Xp = X Xp.. / X

The repeat operators are "greedy" and will find the longest match, and no other.

Traditional BNF notations are also available:

eg
	{ X }		zero or more X, same as X*
	[ X ]		optional X, same as X?


sub1	Literal Values

Literal character values can be expressed in various ways:

eg
	'a'		literal char, or	97
	'a'..'c'	range of chars, or 	97/98/99, or 97..99
	'abc'		literal string		97 98 99
	''		empty string		never fails

Literal characters boil down to integer values, which will normally be interpreted as Unicode character code points.


sub1	The Same Match Operator

Gist provides a context-sensitive prior match operator :[@X]:

eg
	S = X Y @X

The :[@X] matches the same string that the previous :X matched by looking back into the (partial) parse tree, finding the previous :X, and using the value of that match, to match the same string again. The search for the first prior match may continue prior to the parent node through its prior siblings, and so on back to the root of the parse tree. If no prior match is found the operator will fail.

---	...

refs
	The Gist Grammar Language	hhtp://spinachtree.org/gist/into.html


format
	title	h1:prose
	sect	h2:prose
	sub1	h3:prose
	para	p:prose
	eg	pre:text
	refs	dl:format
	---	hr:none

prose
	:_	tt
	~_	em
	"_"	quote
	#_	linkID
	@[_]	link
	^[_]	linkName

style
	.undef { color:red; background-color:yellow; }
	.title, .author, .date { text-align: center; }
	.eg { background-color:#FFFDDA; border: thin solid #ECECEC; }
	dl { font-size:small; }
	dl dd p { margin: 0pt 0pt 10pt 0pt; }
	.format, .prose, .style { display:none; }


